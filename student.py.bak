import datetime
from functools import wraps

from flask import Blueprint, request, jsonify
from flask_jwt_extended import create_access_token, verify_jwt_in_request, get_jwt, current_user
from sqlalchemy.orm import joinedload

from database import db_session
from models import Student, QuestionnaireItem, QuestionnaireAnswer, MatchingScore, Team, TeamInvitation, \
    TeamRequest, get_system_setting

student_pages = Blueprint('student_pages', __name__, template_folder="templates/student")


def student_required():
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            verify_jwt_in_request()
            claims = get_jwt()
            if claims["role"] == "student":
                return fn(*args, **kwargs)
            else:
                return jsonify({
                    "code": 403,
                    "msg": "无权限！"
                }), 403

        return decorator

    return wrapper


def in_step_1_period():
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            start_at = datetime.datetime.strptime(get_system_setting('step_1_start_at'), "%Y-%m-%d %H:%M:%S")
            end_at = datetime.datetime.strptime(get_system_setting('step_1_end_at'), "%Y-%m-%d %H:%M:%S")
            if start_at <= datetime.datetime.now() <= end_at:
                return fn(*args, **kwargs)
            else:
                return jsonify({
                    "code": "400",
                    "msg": "未到个人信息补充系统开放时间"
                }), 400

        return decorator

    return wrapper


def in_step_2_period():
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            start_at = datetime.datetime.strptime(get_system_setting('step_2_start_at'), "%Y-%m-%d %H:%M:%S")
            end_at = datetime.datetime.strptime(get_system_setting('step_2_end_at'), "%Y-%m-%d %H:%M:%S")
            if start_at <= datetime.datetime.now() <= end_at:
                return fn(*args, **kwargs)
            else:
                return jsonify({
                    "code": "400",
                    "msg": "未到异步系统开放时间"
                }), 400

        return decorator

    return wrapper


def in_step_3_period():
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            start_at = datetime.datetime.strptime(get_system_setting('step_3_start_at'), "%Y-%m-%d %H:%M:%S")
            end_at = datetime.datetime.strptime(get_system_setting('step_3_end_at'), "%Y-%m-%d %H:%M:%S")
            if start_at <= datetime.datetime.now() <= end_at:
                return fn(*args, **kwargs)
            else:
                return jsonify({
                    "code": "400",
                    "msg": "未到舍友双选系统开放时间"
                }), 400

        return decorator

    return wrapper


@student_pages.route('/login', methods=['POST'])
def login():
    if request.json is not None:
        id = request.json.get('id', None)
        password = request.json.get('password', None)
        student = db_session.query(Student).where(Student.id == id).first()
        if student is not None and student.check_password(password):
            student.last_logged_at = datetime.datetime.now()
            db_session.commit()
            token = create_access_token(identity=student.id, additional_headers={
                "role": "student"
            }, additional_claims={
                "role": "student"
            })

            return jsonify({
                "code": 200,
                "msg": "登录成功！",
                "data": {
                    "token": token
                }
            })

    return jsonify({
        "code": 401,
        "msg": "邮箱地址或密码错误！"
    })


@student_pages.get('/questionnaire/list')
@student_required()
def questionnaire_list():
    questionnaire_items = db_session.query(QuestionnaireItem).order_by(QuestionnaireItem.index.asc()).all()

    questionnaire_items = [questionnaire_item.to_dict() for questionnaire_item in questionnaire_items]

    return jsonify({
        "code": 200,
        "msg": "success",
        "data": questionnaire_items
    })


@student_pages.get('/questionnaire/answer')
@student_required()
def questionnaire_get_answers():
    questionnaire_answers = db_session.query(QuestionnaireAnswer).options(joinedload(QuestionnaireAnswer.item)).all()

    questionnaire_answers = [questionnaire_answer.to_dict(only=['item_id', 'answer', 'weight', 'item']) for
                             questionnaire_answer in questionnaire_answers]

    return jsonify({
        "code": 200,
        "msg": "success",
        "data": questionnaire_answers
    })


@student_pages.post('/questionnaire/answer')
@in_step_1_period()
@student_required()
def questionnaire_set_answers():
    answer_models_list = []
    if request.json is not None:
        for piece in request.json:
            answer_models_list.append(
                QuestionnaireAnswer(item_id=piece.get('item_id', None),
                                    answer=piece.get('answer', None),
                                    weight=piece.get('weight', None),
                                    student_id=current_user.id)
            )
    # 删除原有答案
    db_session.query(QuestionnaireAnswer).where(QuestionnaireAnswer.student_id == current_user.id).delete()

    # 删除匹配得分
    db_session.query(MatchingScore).where(
        (MatchingScore.to_student_id == current_user.id) | (MatchingScore.from_student_id == current_user.id)).delete()
    # TODO: 加入计划任务 重新计算匹配得分

    db_session.bulk_save_objects(answer_models_list)
    db_session.commit()

    return jsonify({
        "code": 200,
        "msg": "success"
    })


@student_pages.get('/team/recommend_teammates')
@student_required()
@in_step_3_period()
def team_recommend_teammates():
    recommend_scores = db_session.query(MatchingScore) \
        .where(MatchingScore.to_student_id == current_user.id) \
        .options(joinedload(MatchingScore.from_student)) \
        .all()

    construct_data = []
    added_student_ids = []
    for piece in recommend_scores:
        if piece.from_student.gender != current_user.gender:
            continue
        item = piece.from_student.to_dict(only=['id', 'name'])
        # join load 不能执行关联查询 所以在这里手动过滤

        item['score'] = piece.score
        construct_data.append(item)
        added_student_ids.append(item['id'])

    students_with_no_score = db_session.query(Student) \
        .where(Student.gender == current_user.gender) \
        .where(Student.id.not_in(added_student_ids)) \
        .all()

    students_with_no_score = [piece.to_dict(only=['id', 'name']) for piece in students_with_no_score]

    return jsonify({
        "code": 200,
        "msg": "success",
        "data": {
            "students_with_score": construct_data,
            "students_with_no_score": students_with_no_score
        }
    })


# !!important!! 不推荐邀请同学直接进入队伍！！ 这样很可能会忽视队伍里的其他同学 一定要确定每个人的生活习惯都和自己的没有冲突
# !!important!! 这个API主要用于两个都没有入队伍的同学组成新的队伍
@student_pages.post('/team/invite')
@student_required()
@in_step_3_period()
def team_invite():
    if request.json is not None:
        target_student_id = request.json.get('target_student_id')
        team_id = current_user.team_id
        target_student = db_session.query(Student).get(target_student_id)

        if target_student is None:
            return jsonify({
                "code": 404,
                "msg": "学生不存在"
            })

        # 性别校验
        if target_student.gender != current_user.gender:
            return jsonify({
                "code": 400,
                "msg": "不支持男女混寝"
            })

        if target_student.team_id is not None:
            return jsonify({
                "code": 400,
                "msg": "对方已经在其他队伍中了，不能撬墙角"
            })

        if team_id is not None:
            team = db_session.query(Team).get(team_id)
            if team is None:
                return jsonify({
                    "code": 404,
                    "msg": "队伍不存在"
                })
            # 校验性别
            if team.gender != target_student.gender:
                return jsonify({
                    "code": 400,
                    "msg": "不支持男女混寝"
                })

            # 看看满人了没有
            if len(team.students) >= get_system_setting('team_max_student_count'):
                return jsonify({
                    "code": 400,
                    "msg": "队伍满人了"
                })

            # 看看有没有重复的邀请函
            similar_invitation_count = db_session.query(TeamInvitation) \
                .filter(TeamInvitation.to_student_id == target_student_id) \
                .filter(TeamInvitation.team_id == team_id) \
                .filter(TeamInvitation.status == 0) \
                .count()

            if similar_invitation_count > 0:
                return jsonify({
                    "code": 400,
                    "msg": "该同学已经收到过加入本队伍的邀请函"
                })

            similar_request_count = db_session.query(TeamRequest) \
                .filter(TeamRequest.team_id == team_id) \
                .filter(TeamRequest.student_id == target_student_id) \
                .filter(TeamRequest.status == 0) \
                .count()

            if similar_request_count > 0:
                return jsonify({
                    "code": 400,
                    "msg": "该同学已经向本队发出过入队申请，请先处理他的申请"
                })
        else:
            similar_invitation_count = db_session.query(TeamInvitation) \
                .filter(TeamInvitation.to_student_id == target_student_id) \
                .filter(TeamInvitation.from_student_id == current_user.id) \
                .filter(TeamInvitation.team_id == team_id) \
                .filter(TeamInvitation.status == 0) \
                .count()

            if similar_invitation_count > 0:
                return jsonify({
                    "code": 400,
                    "msg": "你已经向该同学发出过组队申请了"
                })

        # 生成邀请函
        invitation = TeamInvitation(
            from_student_id=current_user.id,
            to_student_id=target_student_id,
            team_id=team_id
        )
        db_session.add(invitation)
        db_session.commit()

        return ({
            "code": 200,
            "msg": "success",
            "data": {
                "team_invitation_id": invitation.id
            }
        })


# 入队申请
@student_pages.post('/team/request')
@in_step_3_period()
@student_required()
def team_request():
    if request.json is True:
        team_id = request.json.get('team_id')
        if current_user.team_id is not None:
            return jsonify({
                "code": 400,
                "msg": "你已经在其他队伍中了，请先退出再加入"
            })

        if team_id is not None:
            team = db_session.query(Team).get(team_id)
            if team is None:
                return jsonify({
                    "code": 404,
                    "msg": "队伍不存在"
                })
            # 校验性别
            if team.gender != current_user.gender:
                return jsonify({
                    "code": 400,
                    "msg": "不支持男女混寝"
                })

            # 看看满人了没有
            if len(team.students) >= get_system_setting('team_max_student_count'):
                return jsonify({
                    "code": 400,
                    "msg": "队伍满人了"
                })

            # 看看有没有重复的邀请函
            similar_invitation_count = db_session.query(TeamInvitation) \
                .filter(TeamInvitation.to_student_id == current_user) \
                .filter(TeamInvitation.team_id == team_id) \
                .filter(TeamInvitation.status == 0) \
                .count()

            if similar_invitation_count > 0:
                return jsonify({
                    "code": 400,
                    "msg": "你已经受到过这个队伍的邀请函了，请先处理邀请函"
                })

            similar_request_count = db_session.query(TeamRequest) \
                .filter(TeamRequest.team_id == team_id) \
                .filter(TeamRequest.student_id == current_user.id) \
                .filter(TeamRequest.status == 0) \
                .count()

            if similar_request_count > 0:
                return jsonify({
                    "code": 400,
                    "msg": "你已经向这个队伍发出过申请了，不能重复申请"
                })

            # 生成申请
            team_request = TeamRequest(team_id=team_id, student_id=current_user.id)
            db_session.add(team_request)
            db_session.commit()

            return jsonify({
                "code": 200,
                "data": {
                    "team_request_id": team_request.id
                }
            })


@student_pages.get('/team/invitations')
@student_required()
def team_invitation_list():
    team_invitations = db_session.query(TeamInvitation).where(TeamInvitation.to_student_id == current_user.id).options(
        joinedload(TeamInvitation.team, TeamInvitation.from_student)).all()

    team_invitations = [team_invitation.to_dict(
        only=['id, team_id', 'status', 'reason', 'created_at', 'from_student.name', 'from_student.id', 'team.id',
              'team.description']) for
        team_invitation in team_invitations]

    return jsonify({
        "code": 200,
        "msg": "success",
        "data": {
            "team_invitations": team_invitations
        }
    })


@student_pages.get('/team/requests')
@student_required()
def team_request_list():
    if current_user.team_id is None:
        return jsonify({
            "code": 404,
            "msg": "你还没有进入队伍"
        })

    team_requests = db_session.query(TeamRequest).where(TeamRequest.team_id == current_user.team_id).options(
        joinedload(TeamRequest.student)).all()

    team_requests = [team_request.to_dict(['id', 'status', 'student.id', 'student.name']) for team_request in
                     team_requests]

    return jsonify({
        "code": 200,
        "msg": "success",
        "data": {
            "team_requests": team_requests
        }
    })


@student_pages.post('/team/invitation/process')
@student_required()
@in_step_3_period()
def team_invitation_process():
    if request.json is not None:
        team_invitation_id = request.json.get("team_invitation_id", None)
        accept = bool(request.json.get("accpet"))

        team_invitation = db_session.query(
            TeamInvitation).options(joinedload(TeamInvitation.from_student, TeamInvitation.to_student)).filter(
            TeamInvitation.id == team_invitation_id).first()

        if team_invitation is not None:
            if team_invitation.to_student_id is not current_user.id:
                return jsonify({
                    "code": 403,
                    "msg": "无权操作"
                })

            if team_invitation.status != 0:
                return jsonify({
                    "code": 400,
                    "msg": "该邀请已被处理"
                })

            if not accept:
                team_invitation.status = -1
                db_session.commit()
                return jsonify({
                    "code": 200,
                    "msg": "success"
                })

            else:
                if team_invitation.team is None:
                    # 创建请求的时候已经进行性别校验
                    team = Team(gender=current_user.gender)
                    db_session.add(team)
                    db_session.commit()

                    result = team_invitation.to_student.set_team(team.id)
                    if result is not True:
                        return result
                    else:
                        team_invitation.from_student.team_id = team.id
                        team_invitation.to_student.team_id = team.id
                        team_invitation.status = 1
                        team_invitation.reason = "已创建新的队伍"
                        db_session.commit()

                    return jsonify({
                        "code": 200,
                        "msg": "success",
                        "data":
                            {
                                "create_team": True,
                                "team_id": team.id
                            }
                    })

                else:
                    result = team_invitation.to_student.set_team(team_invitation.team_id)
                    if result is not True:
                        return result
                    else:
                        team_invitation.to_student.team_id = team_invitation.team_id
                        team_invitation.status = 1
                        team_invitation.reason = None
                        db_session.commit()
                        return jsonify({
                            "code": 200,
                            "msg": "success",
                            "data":
                                {
                                    "create_team": False,
                                    "team_id": team_invitation.team_id
                                }
                        })

        return jsonify({
            "code": 404,
            "msg": "邀请不存在"
        })

    return jsonify({
        "code": 400,
        "msg": "数据校验错误"
    })


@student_pages.post("/team/request/process")
@student_required()
@in_step_3_period()
def team_request_process():
    if request.json is not None:
        team_request_id = request.json.get("team_request_id", None)
        accept = bool(request.json.get("accept"))

        team_request = db_session.query(TeamRequest) \
            .join(TeamRequest.student, TeamRequest.team) \
            .filter(TeamRequest.id == team_request_id) \
            .first()

        if team_request is not None:
            # 进行一大堆校验
            if team_request.team_id is not current_user.team_id:
                return jsonify({
                    "code": 403,
                    "msg": "无权操作"
                })

            if team_request.status != 0:
                return jsonify({
                    "code": 400,
                    "msg": "该请求已被处理"
                })

            if not accept:
                team_request.status = -1
                team_request.reason = "Refused by {}".format(current_user.name)
                db_session.commit()
                return jsonify({
                    "code": 200,
                    "msg": "success"
                })
            else:
                result = team_request.student.set_team(team_request.team_id)

                if result is True:
                    team_request.status = 1
                    team_request.reason = "Accepted by {}".format(current_user.name)
                    db_session.commit()

                    return jsonify({
                        "code": 200,
                        "msg": "success"
                    })
                else:
                    return result

        return jsonify({
            "code": 404,
            "msg": "请求不存在"
        })

    return jsonify({
        "code": 400,
        "msg": "数据校验错误"
    })
